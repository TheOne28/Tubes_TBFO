VAR -> __var__ | VAR DOT VAR | CASTER
NUM_TERM -> __num__
NUM -> NUM_TERM | NUM_TERM DOT | DOT NUM_TERM | NUM_TERM DOT NUM_TERM | MINUS NUM
STR -> __str__
BOOL -> True | False

PLUS -> +
MINUS -> -
MULL -> *
ROUND_DIV -> __doubleop__
MOD -> %
DIV -> /
POW -> __doubleop__
ASSIGN -> = 
MATMUL -> @ 
OPEN_BRACKET -> (
CLOSE_BRACKET -> )
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET -> ]
OPEN_CURLY_BRACKET -> {
CLOSE_CURLY_BRACKET -> }
LESS -> <
GREATER -> >
PLUS_ASSIGN -> __assign__
MINUS_ASSIGN -> __assign__
MULL_ASSIGN -> __assign__
DIV_ASSIGN -> __assign__
ROUND_DIV_ASSIGN -> __assign__
MOD_ASSIGN -> __assign__
POW_ASSIGN -> __assign__
MATMUL_ASSIGN -> __assign__
EQ -> __com__
NOT_EQ -> __com__
LESS_EQ -> __com__
GREATER_EQ -> __com__

COLON -> :
DOT -> .
COMMA -> ,

BITWISE_AND -> &
BITWISE_OR -> __or_sym__
BITWISE_XOR -> ^
BITWISE_NOT -> ~
BITWISE_RIGHT_SHIFT -> __doubleop__
BITWISE_LEFT_SHIFT -> __doubleop__
BITWISE_AND_ASSIGN -> __assign__
BITWISE_OR_ASSIGN -> __assign__
BITWISE_XOR_ASSIGN -> __assign__
BITWISE_NOT_ASSIGN -> __assign__
BITWISE_RIGHT_SHIFT_ASSIGN -> __assign__
BITWISE_LEFT_SHIFT_ASSIGN -> __assign__


AND -> and
OR -> or
NOT -> not
IF -> if
ELIF -> elif
ELSE -> else
FOR -> for
IN -> in
RANGE -> range
WHILE -> while
NONE -> none
WITH -> with
DEF -> def
AS -> as
CONTINUE -> continue
BREAK -> break
PASS -> pass
CLASS -> class
RETURN -> return
IMPORT -> import
FROM -> from
IS -> is

ASSIGNMENT_OPERATOR -> ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MULL_ASSIGN | ROUND_DIV_ASSIGN | MOD_ASSIGN | POW_ASSIGN | MATMUL_ASSIGN | BITWISE_AND_ASSIGN | BITWISE_OR_ASSIGN | BITWISE_XOR_ASSIGN | BITWISE_NOT_ASSIGN | BITWISE_RIGHT_SHIFT_ASSIGN | BITWISE_LEFT_SHIFT_ASSIGN 
OPERATOR -> PLUS | MINUS | MULL | ROUND_DIV | MOD | DIV | POW | MATMUL | AND | NOT | OR | LESS | GREATER | LESS_EQ | GREATER_EQ | EQ | NOT_EQ | IS | IS NOT | IN | NOT IN

CASTER -> int | float | str
VARS -> VAR | VAR COMMA VARS
FUNCTION_NAME -> VAR OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET | VAR OPEN_BRACKET CLOSE_BRACKET
NEWLINE -> __new_line__

BASIC_EXP -> NUM | STR | BOOL 
OMNI_EXP -> BASIC_EXP | VAR | TUPLE_EXP | LIST_EXP | DICT_EXP | SET_EXP | OPEN_BRACKET OMNI_EXP CLOSE_BRACKET | CASTER OMNI_EXP | OMNI_EXP OPERATOR OMNI_EXP | VAR FUNCTION_CALL | BASIC_EXP FUNCTION_CALL | FUNCTION_NAME | OMNI_EXP TERNARY_OPERATOR
// TODO: review this
MULTI_OMNI_EXP -> OMNI_EXP | OMNI_EXP COMMA MULTI_OMNI_EXP | MULTI_OMNI_EXP COMMA
LIST_EXP -> OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET MULTI_OMNI_EXP CLOSE_SQUARE_BRACKET
TUPLE_EXP -> OPEN_BRACKET CLOSE_BRACKET | OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET
SET_EXP -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET | OPEN_CURLY_BRACKET MULTI_OMNI_EXP CLOSE_CURLY_BRACKET 
// TODO: review this
DICT_ELMT -> OMNI_EXP COLON OMNI_EXP | DICT_ELMT COMMA DICT_ELMT | DICT_ELMT COMMA
DICT_EXP -> OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET | OPEN_CURLY_BRACKET DICT_ELMT CLOSE_CURLY_BRACKET
IMPORT_EXP -> VARS | VARS AS VARS
FUNCTION_CALL -> DOT FUNCTION_NAME | DOT FUNCTION_NAME FUNCTION_CALL | DOT VAR | DOT VAR FUNCTION_CALL  

ASSIGNMENT_STMT -> VAR ASSIGNMENT_OPERATOR OMNI_EXP NEWLINE
MULTI_ASSIGNMENT_STMT -> VAR ASSIGN OMNI_EXP NEWLINE | VAR ASSIGN MULTI_ASSIGNMENT_STMT NEWLINE
IMPORT_STMT -> IMPORT IMPORT_EXP NEWLINE | FROM VAR IMPORT IMPORT_EXP NEWLINE | FROM VAR IMPORT MULL
STATEMENT -> OMNI_EXP NEWLINE | PASS_STATEMENT | RAISE_STATEMENT | RETURN_STATEMENT | ASSIGNMENT_STMT | MULTI_ASSIGNMENT_STMT | BREAKCON_STMT
MULTI_STATEMENT -> STATEMENT | STATEMENT MULTI_STATEMENT
PASS_STATEMENT -> PASS NEWLINE 
RAISE_STATEMENT -> RAISE FUNCTION_NAME NEWLINE 

IF_BLOCK -> IF_HEADER STATEMENT | IF_HEADER NEWLINE IF_BODY
IF_HEADER -> IF OMNI_EXP COLON
IF_BODY -> BLOCK_PROGRAM
ELIF_BLOCK -> ELIF_HEADER  STATEMENT | ELIF_HEADER NEWLINE IF_BODY | ELIF_HEADER IF_BODY ELIF_BLOCK | ELIF_HEADER NEWLINE IF_BODY ELIF_BLOCK
ELIF_HEADER -> ELIF OMNI_EXP COLON 
ELSE_BLOCK -> ELSE_HEADER STATEMENT | ELSE_HEADER NEWLINE IF_BODY
ELSE_HEADER -> ELSE COLON
TERNARY_OPERATOR -> IF OMNI_EXP ELSE OMNI_EXP
CONDITIONAL_BLOCK -> IF_BLOCK | IF_BLOCK ELIF_BLOCK | IF_BLOCK ELIF_BLOCK ELSE_BLOCK | IF_BLOCK ELSE_BLOCK

LOOP_BLOCK -> FOR_BLOCK | WHILE_BLOCK
FOR_BLOCK -> FOR_HEADER STATEMENT | FOR_HEADER NEWLINE FOR_BODY | FOR_BLOCK ELSE_BLOCK
FOR_HEADER -> FOR VAR IN OMNI_EXP COLON
FOR_BODY -> BLOCK_PROGRAM
WHILE_BLOCK -> WHILE_HEADER STATEMENT | WHILE_HEADER WHILE_BODY
WHILE_HEADER -> WHILE OMNI_EXP COLON
WHILE_BODY -> BLOCK_PROGRAM
BREAKCON_STMT -> BREAK NEWLINE | CONTINUE NEWLINE 

FUNC_BLOCK -> FUNC_HEADER STATEMENT | FUNC_HEADER NEWLINE FUNC_BODY
FUNC_HEADER -> DEF VAR OPEN_BRACKET CLOSE_BRACKET COLON | DEF VAR OPEN_BRACKET ARGS CLOSE_BRACKET COLON 
FUNC_BODY -> BLOCK_PROGRAM
RETURN_STATEMENT -> RETURN | RETURN OMNI_EXP
// TODO: urang nambah comma di args
ARGS -> VAR | VAR ASSIGN OMNI_EXP | VAR COMMA ARGS | VAR ASSIGN OMNI_EXP COMMA ARGS | ARGS COMMA
CLASS_BLOCK -> CLASS_HEADER STATEMENT | CLASS_HEADER CLASS_BODY
CLASS_HEADER -> CLASS VAR COLON | CLASS VAR OPEN_BRACKET CLOSE_BRACKET COLON | CLASS VAR OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET COLON
CLASS_BODY -> BLOCK_PROGRAM

S -> BLOCK_PROGRAM
// TODO: review yang newline-block program
BLOCK_PROGRAM -> MULTI_STATEMENT | CONDITIONAL_BLOCK | LOOP_BLOCK | FUNC_BLOCK | CLASS_BLOCK | IMPORT_STMT | MULTI_STATEMENT BLOCK_PROGRAM | CONDITIONAL_BLOCK BLOCK_PROGRAM | LOOP_BLOCK BLOCK_PROGRAM | FUNC_BLOCK BLOCK_PROGRAM | CLASS_BLOCK BLOCK_PROGRAM | IMPORT_STMT BLOCK_PROGRAM | BLOCK_PROGRAM NEWLINE | NEWLINE BLOCK_PROGRAM


