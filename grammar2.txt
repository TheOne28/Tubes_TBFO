VAR -> __var__ | VAR DOT VAR
NUM -> __num__
STR -> __str__
BOOL -> True | False

PLUS -> +
MINUS -> -
MULL  -> *
ROUND_DIV -> //
MOD -> %
DIV -> /
POW -> **
ASSIGN -> =
OPEN_BRACKET -> (
CLOSE_BRACKET -> )
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET ->]
OPEN_CURLY_BRACKET -> {
CLOSE_CURLY_BRACKET -> }
OPEN_ANGEL_BRACKET -> <
CLOSE_ANGEL_BRACKET -> >
COLON -> :
DOT -> .
COMMA -> ,
 
AND -> and
OR -> or
NOT -> not
IF -> if
ELIF -> elif
ELSE -> else
FOR -> for
IN -> in
RANGE -> range
WHILE -> while
NONE -> none
WITH -> with
DEF -> def
AS -> as
CONTINUE -> continue
BREAK -> break
PASS -> pass
CLASS -> class
RETURN -> return
IMPORT -> import
FROM -> from

AR_OP -> PLUS | MINUS | MULL | ROUND_DIV | MOD | DIV | POW 
STR_OP -> PLUS | MULL
BOOL_OP -> AND | OR | NOT
COMP_OP -> OPEN_ANGEL_BRACKET | CLOSE_ANGEL_BRACKET | ASSIGN

NUM_CASTER -> int | float
STR_CASTER -> str
KEY_DICT -> STR_EXP | VAR
VAL_DICT -> OMNI_EXP
VARS -> VAR | VAR COMMA VARS
FUNCTION_NAME -> VAR OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET | VAR OPEN_BRACKET CLOSE_BRACKET

NUM_EXP -> NUM | NUM AR_OP NUM_EXP | VAR AR_OP NUM_EXP | OPEN_BRACKET NUM_EXP CLOSE_BRACKET | NUM_CASTER OPEN_BRACKET STR_EXP CLOSE_BRACKET | NUM_CASTER OPEN_BRACKET NUM_EXP CLOSE_BRACKET | NUM_CASTER OPEN_BRACKET VAR CLOSE_BRACKET | BOOL_EXP

STR_EXP -> STR | STR STR_OP STR_EXP | VAR STR_OP STR_EXP | OPEN_BRACKET STR_EXP CLOSE_BRACKET | STR_CASTER OPEN_BRACKET OMNI_EXP CLOSE_BRACKET

BOOL_EXP -> BOOL | BOOL BOOL_OP BOOL_EXP | OPEN_BRACKET BOOL_EXP CLOSE_BRACKET | NUM_EXP
OMNI_EXP -> NUM_EXP | STR_EXP | BOOL_EXP | VAR | TUPLE_EXP | LIST_EXP | DICT_EXP | OPEN_BRACKET OMNI_EXP CLOSE_BRACKET | VAR FUNCTION_CALL | STR_EXP FUNCTION_CALL | FUNCTION_NAME | OMNI_EXP TERNARY_OPERATOR
MULTI_OMNI_EXP -> OMNI_EXP | OMNI_EXP COMMA MULTI_OMNI_EXP
LIST_EXP -> OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET MULTI_OMNI_EXP CLOSE_SQUARE_BRACKET | FUNCTION_NAME
TUPLE_EXP -> OPEN_BRACKET CLOSE_BRACKET | OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET
DICT_ELMT -> KEY_DICT COLON VAL_DICT | DICT_ELMT COMMA DICT_ELMT
DICT_EXP -> OPEN_CURLY_BRACKET DICT_ELMT CLOSE_CURLY_BRACKET
IMPORT_EXP -> VARS | VARS AS VARS
FUNCTION_CALL -> DOT FUNCTION_NAME | DOT FUNCTION_NAME FUNCTION_CALL | DOT VAR | DOT VAR FUNCTION_CALL  

IMPORT_STMT -> IMPORT IMPORT_EXP NEWLINE | FROM VAR IMPORT IMPORT_EXP NEWLINE | FROM VAR IMPORT MULL
STATEMENT -> OMNI_EXP NEWLINE 
MULTI_STATEMENT -> STATEMENT | STATEMENT MULTI_STATEMENT

IF_BLOCK -> IF_HEADER STATEMENT | IF_HEADER NEWLINE IF_BODY
IF_HEADER -> IF BOOL_EXP COLON
IF_BODY -> BLOCK_PROGRAM
ELIF_BLOCK -> ELIF_HEADER  STATEMENT | ELIF_HEADER NEWLINE IF_BODY | ELIF_HEADER IF_BODY ELIF_BLOCK | ELIF_HEADER NEWLINE IF_BODY ELIF_BLOCK
ELIF_HEADER -> ELIF BOOL_EXP COLON 
ELSE_BLOCK -> ELSE_HEADER STATEMENT | ELSE_HEADER NEWLINE IF_BODY
ELSE_HEADER -> ELSE COLON
TERNARY_OPERATOR -> IF BOOL_EXP ELSE OMNI_EXP
CONDITIONAL_BLOCK -> IF_BLOCK | IF_BLOCK ELIF_BLOCK | IF BLOCK ELIF_BLOCK ELSE_BLOCK

LOOP_BLOCK -> FOR_BLOCK | WHILE_BLOCK
FOR_BLOCK -> FOR_HEADER STATEMENT | FOR_HEADER NEWLINE FOR_BODY | FOR_BLOCK ELSE_BLOCK
FOR_HEADER -> FOR VAR IN OMNI_EXP COLON
FOR_BODY -> BLOCK_PROGRAM
WHILE_BLOCK -> WHILE_HEADER STATEMENT | WHILE_HEADER WHILE_BODY
WHILE_HEADER -> WHILE BOOL_EXP COLON
WHILE_BODY -> BLOCK_PROGRAM
FOR_ONE_LINER -> FOR VAR IN OMNI_EXP

FUNC_BLOCK -> FUNC_HEADER STATEMENT | FUNC_HEADER NEWLINE FUNC_BODY
FUNC_HEADER -> DEF VAR OPEN_BRACKET CLOSE_BRACKET | DEF VAR OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET
FUNC_BODY -> BLOCK_PROGRAM_WITH_RETURN
BLOCK_PROGRAM_WITH_RETURN -> RETURN_STMT | BLOCK_PROGRAM | RETURN_STMT BLOCK_PROGRAM | BLOCK_PROGRAM RETURN_STMT | 
RETURN_STMT -> RETURN | RETURN OMNI_EXP

CLASS_BLOCK -> CLASS_HEADER STATEMENT | CLASS_HEADER CLASS_BODY
CLASS_HEADER -> CLASS VAR COLON | CLASS VAR OPEN_BRACKET CLOSE_BRACKET COLON | CLASS VAR OPEN_BRACKET MULTI_OMNI_EXP CLOSE_BRACKET
CLASS_BODY -> BLOCK_PROGRAM

S -> BLOCK_PROGRAM
BLOCK_PROGRAM -> MULTI_STATEMENT  | CONDITIONAL_BLOCK | LOOP_BLOCK | FUNC_BLOCK | CLASS_BLOCK | MULTI_STATEMENT BLOCK_PROGRAM | CONDITIONAL_BLOCK BLOCK_PROGRAM | LOOP_BLOCK BLOCK_PROGRAM | FUNC_BLOCK BLOCK_PROGRAM | CLASS_BLOCK BLOCK_PROGRAM
